name: Run Scandium Script

on:
  workflow_dispatch:  # Only manual trigger of the workflow
    inputs:
      starting_url:
        description: 'Starting URL for the tests'
        required: false
        type: string
        default: ''
      environment:
        description: 'Select the test environment to run'
        required: true
        type: choice
        options:
          - Testing
          - Production

jobs:
  execute-scandium-script:
    runs-on: ubuntu-latest

    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      HUB_URL: ${{ secrets.HUB_URL }}
      STARTING_URL: ${{ inputs.starting_url }}
      BROWSER: chrome
      SCREENSHOT: true
      VARIABLES: '{}'
      RETRY: 0
      MAX_ATTEMPTS: 30
      WAIT_PERIOD: 3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Ensure Scandium Script is Executable
        run: chmod +x scandium_script.sh

      - name: Map Environment to Suite ID
        run: |
          if [ "${{ inputs.environment }}" = "Testing" ]; then
            echo "SUITE_ID=9f851856-fee4-4030-8247-06257c174f42" >> $GITHUB_ENV
            echo "Selected Testing environment with suite ID: 9f851856-fee4-4030-8247-06257c174f42"
          elif [ "${{ inputs.environment }}" = "Production" ]; then
            echo "SUITE_ID=9f810514-576d-41b4-bfd8-f832ae831cf9" >> $GITHUB_ENV
            echo "Selected Production environment with suite ID: 9f810514-576d-41b4-bfd8-f832ae831cf9"
          else
            echo "Error: Invalid environment selected"
            exit 1
          fi

      # - name: Print Scandium Script Content
      #   run: |
      #     echo "=== SCANDIUM SCRIPT CONTENT ==="
      #     cat scandium_script.sh
      #     echo "=== END OF SCANDIUM SCRIPT ==="

      - name: Run the Scandium Script
        run: |
          ./scandium_script.sh 2>&1 | tee scandium_output.log
        id: run-tests

      - name: Print Entire Log Output
        if: always()
        run: |
          echo "=== ENTIRE SCANDIUM SCRIPT LOG OUTPUT ==="
          if [ -f "scandium_output.log" ]; then
            cat scandium_output.log
          else
            echo "No log file found"
          fi
          echo "=== END OF LOG OUTPUT ==="

      - name: Save Log Output as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scandium-logs
          path: scandium_output.log

      - name: Prepare Email Content
        if: always()
        run: |
          # Read test result
          if [ -f "test_result.txt" ]; then
            TEST_RESULT=$(cat test_result.txt)
          else
            TEST_RESULT="UNKNOWN"
          fi
          
          # Create email subject and body
          if [ "$TEST_RESULT" = "PASSED" ]; then
            SUBJECT="✅ Scandium Test Results - PASSED"
            BODY="All tests have passed successfully!"
            COLOR="green"
          elif [ "$TEST_RESULT" = "FAILED" ]; then
            SUBJECT="❌ Scandium Test Results - FAILED"
            BODY="One or more tests have failed. Check the logs for details."
            COLOR="red"
          elif [ "$TEST_RESULT" = "TIMEOUT" ]; then
            SUBJECT="⏰ Scandium Test Results - TIMEOUT"
            BODY="Tests did not complete within the timeout period."
            COLOR="orange"
          else
            SUBJECT="❓ Scandium Test Results - UNKNOWN"
            BODY="Test results are unknown. Check the logs for details."
            COLOR="gray"
          fi
          
          # Save email content
          echo "$SUBJECT" > email_subject.txt
          echo "$BODY" > email_body.txt
          echo "$COLOR" > email_color.txt
          
          # Create detailed report
          echo "=== SCANDIUM TEST REPORT ===" > test_report.txt
          echo "Result: $TEST_RESULT" >> test_report.txt
          echo "Environment: ${{ inputs.environment }}" >> test_report.txt
          echo "Repository: ${{ github.repository }}" >> test_report.txt
          echo "Branch: ${{ github.ref_name }}" >> test_report.txt
          echo "Triggered by: ${{ github.actor }}" >> test_report.txt
          echo "Execution Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test_report.txt
          echo "" >> test_report.txt
          
          # Add execution results if available
          if ls execution_result_*.json 1> /dev/null 2>&1; then
            echo "=== EXECUTION DETAILS ===" >> test_report.txt
            for result_file in execution_result_*.json; do
              echo "File: $result_file" >> test_report.txt
              cat "$result_file" | jq '.' >> test_report.txt
              echo "" >> test_report.txt
            done
          fi

      - name: Send Email Notification
        if: always()
        run: |
          # Read email content
          SUBJECT=$(cat email_subject.txt)
          BODY=$(cat email_body.txt)
          COLOR=$(cat email_color.txt)
          
          # Create HTML email content
          HTML_CONTENT="
          <html>
          <body style='font-family: Arial, sans-serif;'>
            <h2 style='color: $COLOR;'>$SUBJECT</h2>
            <p><strong>$BODY</strong></p>
            <hr>
            <h3>Test Details:</h3>
            <ul>
              <li><strong>Environment:</strong> ${{ inputs.environment }}</li>
              <li><strong>Repository:</strong> ${{ github.repository }}</li>
              <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
              <li><strong>Triggered by:</strong> ${{ github.actor }}</li>
              <li><strong>Execution Time:</strong> $(date -u +"%Y-%m-%d %H:%M:%S UTC")</li>
            </ul>
            <hr>
            <p><a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>View Detailed Logs</a></p>
          </body>
          </html>
          "
          
          # Save email content for debugging
          echo "$HTML_CONTENT" > email_notification.html
          echo "$SUBJECT" > email_subject.txt
          
                                # Send email using AWS SES (if configured)
           if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] && [ -n "${{ secrets.AWS_REGION }}" ] && [ -n "${{ secrets.EMAIL_TO }}" ] && [ -n "${{ secrets.EMAIL_FROM }}" ]; then
             echo "Sending email notification via AWS SES..."
             
             # Install AWS CLI
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
             
             # Create SES email JSON payload
             echo '{"Source": "'"${{ secrets.EMAIL_FROM }}"'","Destination":{"ToAddresses":["'"${{ secrets.EMAIL_TO }}"'"]},"Message":{"Subject":{"Data":"'"$SUBJECT"'","Charset":"UTF-8"},"Body":{"Html":{"Data":"'"$HTML_CONTENT"'","Charset":"UTF-8"}}}}' > ses_email.json
             
             # Send email using AWS SES
             aws ses send-email \
               --cli-input-json file://ses_email.json \
               --region "${{ secrets.AWS_REGION }}"
             
             if [ $? -eq 0 ]; then
               echo "✅ Email sent successfully via AWS SES!"
             else
               echo "❌ Failed to send email via AWS SES."
               echo "Please check your AWS credentials and SES configuration."
               echo "Email content has been saved as artifacts for manual sending."
             fi
           else
             echo "⚠️ AWS SES configuration not found. Email content saved as artifacts."
             echo "To enable AWS SES email sending, add these secrets:"
             echo "  - AWS_ACCESS_KEY_ID (your AWS access key)"
             echo "  - AWS_SECRET_ACCESS_KEY (your AWS secret key)"
             echo "  - AWS_REGION (e.g., us-east-1, eu-west-1)"
             echo "  - EMAIL_FROM (verified sender email in SES)"
             echo "  - EMAIL_TO (recipient email)"
             echo ""
             echo "Note: Make sure your sender email is verified in AWS SES."
           fi

      - name: Save Email Content as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: email-notifications
          path: |
            email_notification.html
            email_subject.txt
            test_report.txt
            execution_result_*.json