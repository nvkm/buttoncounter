name: Run Scandium Script

on:
  workflow_dispatch:  # Only manual trigger of the workflow
    inputs:
      starting_url:
        description: 'Starting URL for the tests'
        required: false
        type: string
        default: ''
      environment:
        description: 'Select the test environment to run'
        required: true
        type: choice
        options:
          - Testing
          - Production

jobs:
  execute-scandium-script:
    runs-on: ubuntu-latest

    env:
      API_TOKEN: ${{ secrets.API_TOKEN }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      HUB_URL: ${{ secrets.HUB_URL }}
      STARTING_URL: ${{ inputs.starting_url }}
      BROWSER: chrome
      SCREENSHOT: true
      VARIABLES: '{}'
      RETRY: 0
      MAX_ATTEMPTS: 30
      WAIT_PERIOD: 3

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Ensure Scandium Script is Executable
        run: chmod +x scandium_script.sh

      - name: Map Environment to Suite ID
        run: |
          if [ "${{ inputs.environment }}" = "Testing" ]; then
            echo "SUITE_ID=9f851856-fee4-4030-8247-06257c174f42" >> $GITHUB_ENV
            echo "Selected Testing environment with suite ID: 9f851856-fee4-4030-8247-06257c174f42"
          elif [ "${{ inputs.environment }}" = "Production" ]; then
            echo "SUITE_ID=9f810514-576d-41b4-bfd8-f832ae831cf9" >> $GITHUB_ENV
            echo "Selected Production environment with suite ID: 9f810514-576d-41b4-bfd8-f832ae831cf9"
          else
            echo "Error: Invalid environment selected"
            exit 1
          fi

      # - name: Print Scandium Script Content
      #   run: |
      #     echo "=== SCANDIUM SCRIPT CONTENT ==="
      #     cat scandium_script.sh
      #     echo "=== END OF SCANDIUM SCRIPT ==="

      - name: Run the Scandium Script
        run: |
          ./scandium_script.sh 2>&1 | tee scandium_output.log
        id: run-tests

      - name: Print Entire Log Output
        if: always()
        run: |
          echo "=== ENTIRE SCANDIUM SCRIPT LOG OUTPUT ==="
          if [ -f "scandium_output.log" ]; then
            cat scandium_output.log
          else
            echo "No log file found"
          fi
          echo "=== END OF LOG OUTPUT ==="

      - name: Save Log Output as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scandium-logs
          path: scandium_output.log

      - name: Prepare Email Content
        if: always()
        run: |
          # Read test result
          if [ -f "test_result.txt" ]; then
            TEST_RESULT=$(cat test_result.txt)
          else
            TEST_RESULT="UNKNOWN"
          fi
          
          # Create email subject and body
          if [ "$TEST_RESULT" = "PASSED" ]; then
            SUBJECT="✅ Scandium Test Results - PASSED"
            BODY="All tests have passed successfully!"
            COLOR="green"
          elif [ "$TEST_RESULT" = "FAILED" ]; then
            SUBJECT="❌ Scandium Test Results - FAILED"
            BODY="One or more tests have failed. Check the logs for details."
            COLOR="red"
          elif [ "$TEST_RESULT" = "TIMEOUT" ]; then
            SUBJECT="⏰ Scandium Test Results - TIMEOUT"
            BODY="Tests did not complete within the timeout period."
            COLOR="orange"
          else
            SUBJECT="❓ Scandium Test Results - UNKNOWN"
            BODY="Test results are unknown. Check the logs for details."
            COLOR="gray"
          fi
          
          # Save email content
          echo "$SUBJECT" > email_subject.txt
          echo "$BODY" > email_body.txt
          echo "$COLOR" > email_color.txt
          
          # Create detailed report
          echo "=== SCANDIUM TEST REPORT ===" > test_report.txt
          echo "Result: $TEST_RESULT" >> test_report.txt
          echo "Environment: ${{ inputs.environment }}" >> test_report.txt
          echo "Repository: ${{ github.repository }}" >> test_report.txt
          echo "Branch: ${{ github.ref_name }}" >> test_report.txt
          echo "Triggered by: ${{ github.actor }}" >> test_report.txt
          echo "Execution Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test_report.txt
          echo "" >> test_report.txt
          
          # Add execution results if available
          if ls execution_result_*.json 1> /dev/null 2>&1; then
            echo "=== EXECUTION DETAILS ===" >> test_report.txt
            for result_file in execution_result_*.json; do
              echo "File: $result_file" >> test_report.txt
              cat "$result_file" | jq '.' >> test_report.txt
              echo "" >> test_report.txt
            done
          fi

      - name: Send Scandium Results via Gmail SMTP
        run: |
          GMAIL_USERNAME=${{ secrets.GMAIL_USERNAME }}
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
          EMAIL_TO=${{ secrets.EMAIL_TO }}

          # Read Scandium result
          if [ -f "test_result.txt" ]; then
            TEST_RESULT=$(cat test_result.txt)
          else
            TEST_RESULT="UNKNOWN"
          fi

          # Prepare subject/body/color
          if [ "$TEST_RESULT" = "PASSED" ]; then
            SUBJECT="✅ Scandium Test Results - PASSED"
            BODY="All tests have passed successfully!"
            COLOR="green"
          elif [ "$TEST_RESULT" = "FAILED" ]; then
            SUBJECT="❌ Scandium Test Results - FAILED"
            BODY="One or more tests have failed. Check the logs for details."
            COLOR="red"
          elif [ "$TEST_RESULT" = "TIMEOUT" ]; then
            SUBJECT="⏰ Scandium Test Results - TIMEOUT"
            BODY="Tests did not complete within the timeout period."
            COLOR="orange"
          else
            SUBJECT="❓ Scandium Test Results - UNKNOWN"
            BODY="Test results are unknown. Check the logs for details."
            COLOR="gray"
          fi

          # Optionally, include a summary from test_report.txt
          if [ -f "test_report.txt" ]; then
            REPORT_CONTENT=$(cat test_report.txt)
          else
            REPORT_CONTENT="No detailed report found."
          fi

          # Prepare HTML content
          HTML_CONTENT="
          <html>
          <body style='font-family: Arial, sans-serif; padding: 20px;'>
            <div style='max-width: 600px; margin: 0 auto; border: 1px solid #ddd; border-radius: 8px; padding: 20px;'>
              <h2 style='color: $COLOR; margin-top: 0;'>$SUBJECT</h2>
              <p><strong>$BODY</strong></p>
              <hr style='border: 1px solid #eee; margin: 20px 0;'>
              <h3 style='color: #333;'>Test Report:</h3>
              <pre style='color: #555; background: #f9f9f9; padding: 10px; border-radius: 4px; font-size: 13px;'>$REPORT_CONTENT</pre>
              <hr style='border: 1px solid #eee; margin: 20px 0;'>
              <p style='color: #666; font-size: 14px;'>
                <a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}' style='color: #0078d4;'>View Workflow Run</a>
              </p>
            </div>
          </body>
          </html>
          "

          echo "From: $GMAIL_USERNAME" > email_message.txt
          echo "To: $EMAIL_TO" >> email_message.txt
          echo "Subject: $SUBJECT" >> email_message.txt
          echo "MIME-Version: 1.0" >> email_message.txt
          echo "Content-Type: text/html; charset=UTF-8" >> email_message.txt
          echo "" >> email_message.txt
          echo "$HTML_CONTENT" >> email_message.txt

          # Handle multiple recipients
          IFS=',' read -ra ADDR <<< "$EMAIL_TO"
          RCPT_ARGS=""
          for RECIPIENT in "${ADDR[@]}"; do
            RCPT_ARGS="$RCPT_ARGS --mail-rcpt $RECIPIENT"
          done

          eval curl -v --mail-from "$GMAIL_USERNAME" \
               $RCPT_ARGS \
               --upload-file email_message.txt \
               --ssl-reqd \
               --user "$GMAIL_USERNAME:$GMAIL_APP_PASSWORD" \
               smtp://smtp.gmail.com:587

          if [ $? -eq 0 ]; then
            echo "✅ Email sent successfully from Gmail!"
          else
            echo "❌ Failed to send email from Gmail."
            echo "See: https://support.google.com/accounts/answer/185833"
          fi

      - name: Save Email Content as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: email-notifications
          path: |
            email_notification.html
            email_subject.txt
            test_report.txt
            execution_result_*.json